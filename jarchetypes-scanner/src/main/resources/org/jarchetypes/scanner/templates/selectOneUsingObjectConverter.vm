##package ${targetPackage};
##
##import javax.faces.convert.FacesConverter;
##
##  
##@FacesConverter("selectOneUsingObjectConverter") 
##public class SelectOneUsingObjectConverter extends org.jarchetypes.converter.SelectOneUsingObjectConverter {
##}
package ${targetPackage};

import java.lang.reflect.Field;
import java.util.Collection;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.ConverterException;
import javax.faces.convert.FacesConverter;
import org.primefaces.component.selectonemenu.SelectOneMenu;

@FacesConverter("selectOneUsingObjectConverter")
public class SelectOneUsingObjectConverter implements Converter {

	@SuppressWarnings("rawtypes")
	@Override
	public Object getAsObject(FacesContext context, UIComponent component,
			String value) {

		String id = getCurrentId(component, value);

		try {
			Collection items = (Collection) component.getAttributes().get(
					"items");
			return findById(items, id);
		} catch (Exception ex) {
			throw new ConverterException(
					"Não foi possível aplicar conversão de item com valor ["
							+ value + "] no componente [" + component.getId()
							+ "]", ex);
		}
	}

	private String getCurrentId(UIComponent component, Object value) {
		SelectOneMenu selectOneMenu = (SelectOneMenu) component;

		Object o = selectOneMenu.getValue();

		String id = "";

		if (value == null || value.equals("")) {

			if (o == null)
				return null;
			id = getIdByReflection(o);
		} else {
			id = value instanceof String ? value.toString() : getIdByReflection(value) ;
		}
		
		return id;
	}

	@Override
	public String getAsString(FacesContext context, UIComponent component,
			Object value) {
		String id = getCurrentId(component, value);
		return id;
	}

	@SuppressWarnings("rawtypes")
	private Object findById(Collection collection, String idToFind) {
		for (Object obj : collection) {
			String id = getIdByReflection(obj);
			if (id.equals(idToFind))
				return obj;
		}

		return null;
	}

	private String getIdByReflection(Object bean) {
		try {
			Class<?> c = bean.getClass();

			Field idField = null;

			while (!c.getName().equals(Object.class.getName())) {

				try {
					idField = c.getDeclaredField("id");
					idField.setAccessible(true);
					return (String) idField.get(bean);
				} catch (NoSuchFieldException nsfe) {

				}

				c = c.getSuperclass();

			}

			return null;
		} catch (Exception ex) {
			throw new RuntimeException(
					"Não foi possível obter a propriedade 'id' do item", ex);
		}
	}

}
