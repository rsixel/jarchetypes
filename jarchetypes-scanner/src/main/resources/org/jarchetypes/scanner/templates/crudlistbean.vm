package ${targetPackage};

import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.event.ActionEvent;

import javax.inject.Inject;
import java.util.HashMap;
import org.jarchetypes.service.CRUDService;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CellEditEvent; 

import $beanPathName;


@ManagedBean
@SessionScoped
public class ${beanName}CRUDListBean  implements Serializable {

	private static final long serialVersionUID = 1L;

	private int tempId = 0;
	 
	@Inject
	private CRUDService cRUDService;
	
	private List<${beanName}> list = new ArrayList<${beanName}>();
	
	#foreach( $widget in $filters )
	private $widget.getFieldType() $widget.getFieldName();			
	#end
		
	private boolean saved = false;
	
	public ${beanName}CRUDListBean() {
		super();
	}
	
	public void search(){
		
		HashMap<String,Object> parameters = new HashMap<String,Object>(); 

		try {
			list = cRUDService.search(${beanName}.class,parameters);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	
	public List<${beanName}>  getList(){
				
		return list;
			
	}
	
	
	public boolean isSaved(){
		return saved;
	}
	
	#foreach( $widget in $filters )
	public  $widget.getFieldType() get$ArchetypesUtils.captalize($widget.getFieldName())() {
		return $widget.getFieldName();
	}

	public void set$ArchetypesUtils.captalize($widget.getFieldName())($widget.getFieldType() $widget.getFieldName()) {
		this.$widget.getFieldName() = $widget.getFieldName();
	}
	#end
	
	public void save(ActionEvent actionEvent) throws Exception{
		RequestContext context = RequestContext.getCurrentInstance();   
		saved = false;
		
		try {
		
			for(Object bean:list){

				Object id = bean.getClass().getMethod("getId").invoke(bean);
						
				if(id!=null && ((String)id).startsWith("*_*_*remove_")){
					bean.getClass().getMethod("setId",String.class).invoke(bean,new Object[]{null});
				}
			
				cRUDService.save(bean);
			}
			saved = true;
			
		} catch (Exception e) {
			e.printStackTrace();
			
		}
		
		context.addCallbackParam("saved", saved);
	}
	
	
	public String add() throws Exception{
		${beanName} bean = new ${beanName}();
		
		
		list.add(bean);
		
		bean.getClass().getMethod("setId",String.class).invoke(bean,"*_*_*remove_"+tempId);
		
		tempId++;
		
		return "$beanName?faces-redirect=true";		
	}
	
	public String cancel() throws Exception{
		search();
		
		return "${beanName}Search?faces-redirect=true";		
	}
	
  	public void onCellEdit(CellEditEvent event) {  
        Object oldValue = event.getOldValue();  
        Object newValue = event.getNewValue();  
          
##        if(newValue != null && !newValue.equals(oldValue)) {  
##            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Cell Changed", "Old: " + oldValue + ", New:" + newValue);  
##            FacesContext.getCurrentInstance().addMessage(null, msg);  
##        }  
    }  	
		
		
 	public void removeItem(Object item) throws Exception{
 		
 		Object id = item.getClass().getMethod("getId").invoke(item);
 		
 		list.remove(item);
 		
 		if(id!=null && ! ((String)id).startsWith("*_*_*remove_")){
 			cRUDService.remove(item);
 		}
    }				
}
