package ${targetPackage};

import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.event.ActionEvent;

import javax.inject.Inject;
import java.util.HashMap;
import org.jarchetypes.service.CRUDService;
import org.primefaces.context.RequestContext;
import $beanPathName;


@ManagedBean
@SessionScoped
public class ${beanName}CRUDBean  implements Serializable {

	private static final long serialVersionUID = 1L;

	@Inject
	private CRUDService cRUDService;
	
	private List<${beanName}> list = new ArrayList<${beanName}>();
	
	#foreach( $widget in $widgets )
	#if(${widget.getAttribute("selectItems")})
		
	private List<${widget.getAttribute("genericType")}> $widget.getFieldName()List;	
	
	#end
	#end
	
	#foreach( $widget in $filters )
	private $widget.getFieldType() $widget.getFieldName();			
	#end
	
	#foreach( $widget in $listFilters )
	private $widget.getFieldType() $widget.getFieldName();			
	#end
	
		
	private ${beanName} bean = new ${beanName}();
	
	private boolean saved = false;
	
	public ${beanName}CRUDBean() {
		super();
	}
	
	public void search(){
		
		HashMap<String,Object> parameters = new HashMap<String,Object>(); 
		
		#foreach( $widget in $filters )
		parameters.put("$widget.getFieldName()",$widget.getFieldName());			
		#end
		
		
		try {
			list = cRUDService.<${beanName}>search(${beanName}.class,parameters);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	
	public List<${beanName}>  getList(){
				
		return list;
			
	}
	
	
	public boolean isSaved(){
		return saved;
	}
	
	#foreach( $widget in $filters )
	public  $widget.getFieldType() get$ArchetypesUtils.captalize($widget.getFieldName())() {
		return $widget.getFieldName();
	}

	public void set$ArchetypesUtils.captalize($widget.getFieldName())($widget.getFieldType() $widget.getFieldName()) {
		this.$widget.getFieldName() = $widget.getFieldName();
	}
    #end
	
	
	#foreach( $widget in $widgets )
	#if(${widget.getAttribute("selectItems")})
	
	public  List<$widget.getFieldType()> get$ArchetypesUtils.captalize($widget.getFieldName())List() {
		if($widget.getFieldName()List==null){
			HashMap<String,Object> parameters = new HashMap<String,Object>(); 
			
			try {
				$widget.getFieldName()List = cRUDService.<${widget.getAttribute("genericType")}>search(${widget.getAttribute("genericType")}.class,parameters);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} 
		
		return $widget.getFieldName()List;
	}
	#end
	#end
	

	
	#foreach( $widget in $listFilters )
	public  $widget.getFieldType() get$ArchetypesUtils.captalize($widget.getFieldName())() {
		return $widget.getFieldName();
	}

	public void set$ArchetypesUtils.captalize($widget.getFieldName())($widget.getFieldType() $widget.getFieldName()) {
		this.$widget.getFieldName() = $widget.getFieldName();
	}
	#end
	
	public void save(ActionEvent actionEvent) {
		RequestContext context = RequestContext.getCurrentInstance();   
		saved = false;
		try {
		
			cRUDService.save(bean);
			saved = true;
			
		} catch (Exception e) {
			e.printStackTrace();
			
		}
		
		context.addCallbackParam("saved", saved);
	}
	
	public ${beanName} getBean(){
		return bean;
	}
	
	
	public void setBean(${beanName} bean){
		this.bean = bean;
	}
	
	
	public String add(){
		bean = new ${beanName}();
		
		return "$beanName?faces-redirect=true";		
	}
	
	public String cancel() throws Exception{
		Object id = bean.getClass().getMethod("getId").invoke(bean);
	
		if (id == null) {
			bean = new ${beanName}();
		} else {
			bean = cRUDService.find(${beanName}.class,id);
		}
			
		
		return "${beanName}Search?faces-redirect=true";		
	}
	
	
	
		
}
